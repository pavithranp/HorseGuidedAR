// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Laser.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace lasermsg {

  /// <summary>Holder for reflection information generated from Laser.proto</summary>
  public static partial class LaserReflection {

    #region Descriptor
    /// <summary>File descriptor for Laser.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LaserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtMYXNlci5wcm90bxIIbGFzZXJtc2ciwAEKCUxhc2Vyc2NhbhIRCglhbmds",
            "ZV9taW4YASABKAISEQoJYW5nbGVfbWF4GAIgASgCEhcKD2FuZ2xlX2luY3Jl",
            "bWVudBgDIAEoAhIWCg50aW1lX2luY3JlbWVudBgEIAEoAhIRCglzY2FuX3Rp",
            "bWUYBSABKAISEQoJcmFuZ2VfbWluGAYgASgCEhEKCXJhbmdlX21heBgHIAEo",
            "AhIOCgZyYW5nZXMYCCADKAISEwoLaW50ZW5zaXRpZXMYCSADKAJCC6oCCGxh",
            "c2VybXNnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::lasermsg.Laserscan), global::lasermsg.Laserscan.Parser, new[]{ "AngleMin", "AngleMax", "AngleIncrement", "TimeIncrement", "ScanTime", "RangeMin", "RangeMax", "Ranges", "Intensities" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Laserscan : pb::IMessage<Laserscan> {
    private static readonly pb::MessageParser<Laserscan> _parser = new pb::MessageParser<Laserscan>(() => new Laserscan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Laserscan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::lasermsg.LaserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Laserscan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Laserscan(Laserscan other) : this() {
      angleMin_ = other.angleMin_;
      angleMax_ = other.angleMax_;
      angleIncrement_ = other.angleIncrement_;
      timeIncrement_ = other.timeIncrement_;
      scanTime_ = other.scanTime_;
      rangeMin_ = other.rangeMin_;
      rangeMax_ = other.rangeMax_;
      ranges_ = other.ranges_.Clone();
      intensities_ = other.intensities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Laserscan Clone() {
      return new Laserscan(this);
    }

    /// <summary>Field number for the "angle_min" field.</summary>
    public const int AngleMinFieldNumber = 1;
    private float angleMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleMin {
      get { return angleMin_; }
      set {
        angleMin_ = value;
      }
    }

    /// <summary>Field number for the "angle_max" field.</summary>
    public const int AngleMaxFieldNumber = 2;
    private float angleMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleMax {
      get { return angleMax_; }
      set {
        angleMax_ = value;
      }
    }

    /// <summary>Field number for the "angle_increment" field.</summary>
    public const int AngleIncrementFieldNumber = 3;
    private float angleIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleIncrement {
      get { return angleIncrement_; }
      set {
        angleIncrement_ = value;
      }
    }

    /// <summary>Field number for the "time_increment" field.</summary>
    public const int TimeIncrementFieldNumber = 4;
    private float timeIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeIncrement {
      get { return timeIncrement_; }
      set {
        timeIncrement_ = value;
      }
    }

    /// <summary>Field number for the "scan_time" field.</summary>
    public const int ScanTimeFieldNumber = 5;
    private float scanTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScanTime {
      get { return scanTime_; }
      set {
        scanTime_ = value;
      }
    }

    /// <summary>Field number for the "range_min" field.</summary>
    public const int RangeMinFieldNumber = 6;
    private float rangeMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeMin {
      get { return rangeMin_; }
      set {
        rangeMin_ = value;
      }
    }

    /// <summary>Field number for the "range_max" field.</summary>
    public const int RangeMaxFieldNumber = 7;
    private float rangeMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeMax {
      get { return rangeMax_; }
      set {
        rangeMax_ = value;
      }
    }

    /// <summary>Field number for the "ranges" field.</summary>
    public const int RangesFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_ranges_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> ranges_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Ranges {
      get { return ranges_; }
    }

    /// <summary>Field number for the "intensities" field.</summary>
    public const int IntensitiesFieldNumber = 9;
    private static readonly pb::FieldCodec<float> _repeated_intensities_codec
        = pb::FieldCodec.ForFloat(74);
    private readonly pbc::RepeatedField<float> intensities_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Intensities {
      get { return intensities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Laserscan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Laserscan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleMin, other.AngleMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleMax, other.AngleMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleIncrement, other.AngleIncrement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeIncrement, other.TimeIncrement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScanTime, other.ScanTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeMin, other.RangeMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeMax, other.RangeMax)) return false;
      if(!ranges_.Equals(other.ranges_)) return false;
      if(!intensities_.Equals(other.intensities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AngleMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleMin);
      if (AngleMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleMax);
      if (AngleIncrement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleIncrement);
      if (TimeIncrement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeIncrement);
      if (ScanTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScanTime);
      if (RangeMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeMin);
      if (RangeMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeMax);
      hash ^= ranges_.GetHashCode();
      hash ^= intensities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AngleMin != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AngleMin);
      }
      if (AngleMax != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AngleMax);
      }
      if (AngleIncrement != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AngleIncrement);
      }
      if (TimeIncrement != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TimeIncrement);
      }
      if (ScanTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ScanTime);
      }
      if (RangeMin != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RangeMin);
      }
      if (RangeMax != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RangeMax);
      }
      ranges_.WriteTo(output, _repeated_ranges_codec);
      intensities_.WriteTo(output, _repeated_intensities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AngleMin != 0F) {
        size += 1 + 4;
      }
      if (AngleMax != 0F) {
        size += 1 + 4;
      }
      if (AngleIncrement != 0F) {
        size += 1 + 4;
      }
      if (TimeIncrement != 0F) {
        size += 1 + 4;
      }
      if (ScanTime != 0F) {
        size += 1 + 4;
      }
      if (RangeMin != 0F) {
        size += 1 + 4;
      }
      if (RangeMax != 0F) {
        size += 1 + 4;
      }
      size += ranges_.CalculateSize(_repeated_ranges_codec);
      size += intensities_.CalculateSize(_repeated_intensities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Laserscan other) {
      if (other == null) {
        return;
      }
      if (other.AngleMin != 0F) {
        AngleMin = other.AngleMin;
      }
      if (other.AngleMax != 0F) {
        AngleMax = other.AngleMax;
      }
      if (other.AngleIncrement != 0F) {
        AngleIncrement = other.AngleIncrement;
      }
      if (other.TimeIncrement != 0F) {
        TimeIncrement = other.TimeIncrement;
      }
      if (other.ScanTime != 0F) {
        ScanTime = other.ScanTime;
      }
      if (other.RangeMin != 0F) {
        RangeMin = other.RangeMin;
      }
      if (other.RangeMax != 0F) {
        RangeMax = other.RangeMax;
      }
      ranges_.Add(other.ranges_);
      intensities_.Add(other.intensities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AngleMin = input.ReadFloat();
            break;
          }
          case 21: {
            AngleMax = input.ReadFloat();
            break;
          }
          case 29: {
            AngleIncrement = input.ReadFloat();
            break;
          }
          case 37: {
            TimeIncrement = input.ReadFloat();
            break;
          }
          case 45: {
            ScanTime = input.ReadFloat();
            break;
          }
          case 53: {
            RangeMin = input.ReadFloat();
            break;
          }
          case 61: {
            RangeMax = input.ReadFloat();
            break;
          }
          case 66:
          case 69: {
            ranges_.AddEntriesFrom(input, _repeated_ranges_codec);
            break;
          }
          case 74:
          case 77: {
            intensities_.AddEntriesFrom(input, _repeated_intensities_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
